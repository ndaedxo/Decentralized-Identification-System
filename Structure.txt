DigiVerifyMe/                   
├── manage.py                  # Django management script
├── backend/                   # Backend Django project folder
│   ├── __init__.py
│   ├── settings.py            # Django settings
│   ├── urls.py                # URL routing
│   ├── wsgi.py                # WSGI config
│   └── asgi.py                # ASGI config
├── apps/                      # Django apps for modular development
│   ├── auth_service/          # Authentication and JWT token management
│   │   ├── migrations/
│   │   ├── models.py
│   │   ├── views.py           # Endpoints for login, JWT, key management
│   │   ├── serializers.py     # Data validation for user input
│   │   ├── urls.py            # Route authentication API endpoints
│   │   └── tests.py           # Unit tests for authentication
│   ├── verification_service/  # Verification API and ZKP validation
│   │   ├── migrations/
│   │   ├── models.py
│   │   ├── views.py           # Endpoints for handling verification
│   │   ├── services.py        # Business logic for verification
│   │   ├── urls.py            # Route verification API endpoints
│   │   └── tests.py           # Unit tests for verification
│   ├── blockchain_service/    # Interfacing with smart contracts
│   │   ├── scripts/           # Blockchain interaction scripts
│   │   ├── models.py          # Models for handling blockchain records
│   │   ├── views.py           # API endpoints for smart contract interactions
│   │   ├── services.py        # Business logic for smart contract calls
│   │   ├── urls.py            # Route blockchain API endpoints
│   │   └── tests.py           # Unit tests for blockchain interaction
│   ├── kyc_integration/       # KYC provider integration
│   │   ├── views.py           # API endpoints for external KYC providers
│   │   ├── services.py        # Business logic for KYC integration
│   │   ├── urls.py            # Route KYC API endpoints
│   │   └── tests.py           # Unit tests for KYC integration
│   ├── adminWebapp/           # Admin web app
│   │   ├── views.py
│   │   ├── templates/  
│   │   ├── static/    
│   │   ├── urls.py        
│   │   └── tests.py       
│   ├── settings/              # (New) Additional settings module
        ├── __init__.py
        ├── models.py          # Models to store user settings
        ├── views.py           # API views to handle settings
        ├── serializers.py     # Serializers for input validation
        ├── urls.py            # Routing for settings APIs
        ├── services.py        # Business logic for managing settings
        └── tests.py           # Unit tests for settings             
├── zeroknowledgeproof/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── urls.py
│   ├── services.py
│   └── tests.py
├── notifications/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── urls.py
│   ├── services.py
│   └── tests.py
├── sessionManager/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── urls.py
│   ├── services.py
│   └── tests.py
├── wallet/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── serializers.py
│   ├── views.py
│   ├── urls.py
│   ├── services.py
│   └── tests.py
├── api/                   # (New) API for external/internal services
│   ├── __init__.py        # Marks this directory as a Python package
│   ├── admin.py           # Django admin configurations (if needed)
│   ├── apps.py            # Django app configurations
│   ├── models.py          # Define models (if any)
│   ├── serializers.py     # Define serializers for API data validation
│   ├── views.py           # API endpoints and views for services
│   ├── urls.py            # Routing for API endpoints
│   ├── services.py        # Business logic for handling requests
│   └── tests.py           # Unit tests for API functionality
└── requirements.txt           # Python dependencies for Django and other packages


DigiVerifyMe/
└── apps/
    └── adminWebapp/
        ├── __init__.py
        ├── admin.py
        ├── apps.py
        ├── api_views.py
        ├── models.py
        ├── services.py
        ├── tests.py
        ├── urls.py
        ├── views.py
        ├── migrations/
        ├── static/
        └── templates/
            ├── admin_logs.html
            ├── base.html
            ├── dashboard.html
            ├── user_management.html
            └── verification_management.html

# DigiVerifyMe/apps/api/views.py
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.urls import reverse

class HomeView(APIView):
    def get(self, request):
        app_links = [
            {'name': 'Authentication Service', 'url': request.build_absolute_uri(reverse('auth_service:home'))},  # Fix here
            {'name': 'Verification Service', 'url': request.build_absolute_uri(reverse('verification_service:home'))},
            {'name': 'Blockchain Service', 'url': request.build_absolute_uri(reverse('blockchain_service:home'))},
            {'name': 'KYC Integration', 'url': request.build_absolute_uri(reverse('kyc_integration:home'))},
            {'name': 'Settings', 'url': request.build_absolute_uri(reverse('settings:home'))},
            {'name': 'Zero Knowledge Proof', 'url': request.build_absolute_uri(reverse('zeroknowledgeproof:home'))},
            {'name': 'Notifications', 'url': request.build_absolute_uri(reverse('notifications:home'))},
            {'name': 'Session Manager', 'url': request.build_absolute_uri(reverse('sessionManager:home'))},
            {'name': 'Wallet', 'url': request.build_absolute_uri(reverse('wallet:home'))},
        ]
        
        return Response({'app_links': app_links}, status=status.HTTP_200_OK)
# Backend\DigiVerifyMe\apps\api\urls.py
# apps/api/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import HomeView  # Ensure this is the correct view import

app_name = 'api'
router = DefaultRouter()

# The API URLs are now determined automatically by the router
urlpatterns = [
    path('', HomeView.as_view(), name='home'),  # Home page link
    path('auth/', include('apps.auth_service.urls', namespace='auth_service')),  # Include auth_service URLs
    path('verification/', include('apps.verification_service.urls', namespace='verification_service')),
    path('blockchain/', include('apps.blockchain_service.urls', namespace='blockchain_service')),
    path('kyc/', include('apps.kyc_integration.urls', namespace='kyc_integration')),
    path('settings/', include('apps.settings.urls', namespace='settings')),
    path('zeroknowledgeproof/', include('apps.zeroknowledgeproof.urls', namespace='zeroknowledgeproof')),
    path('notifications/', include('apps.notifications.urls', namespace='notifications')),
    path('sessionManager/', include('apps.sessionManager.urls', namespace='sessionManager')),
    path('wallet/', include('apps.wallet.urls', namespace='wallet')),
    path('api-auth/', include('rest_framework.urls', namespace='api-auth')),  # Include DRF's authentication views
]
from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.decorators import api_view, permission_classes
from django.urls import reverse
from django.contrib.auth import authenticate, login, logout
from .models import CustomUser
from .serializers import UserSignupSerializer, UserSerializer, UserLoginSerializer
import logging

logger = logging.getLogger(__name__)

@api_view(['GET'])
def home(request):
    urls = {
        'home': request.build_absolute_uri(reverse('auth_service:home')),
        'login': request.build_absolute_uri(reverse('auth_service:login')),
        'signup': request.build_absolute_uri(reverse('auth_service:signup')),
        'profile': request.build_absolute_uri(reverse('auth_service:profile')),
    }
    return Response({
        "message": "Welcome to the Authentication Service!",
        "available_urls": urls,
    })

class UserSignupView(generics.GenericAPIView):
    permission_classes = [permissions.AllowAny]
    serializer_class = UserSignupSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()  # Save the new user
        return Response({"message": "User created successfully."}, status=status.HTTP_201_CREATED)

class UserLoginView(generics.GenericAPIView):
    permission_classes = [permissions.AllowAny]
    serializer_class = UserLoginSerializer

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']  # Get the authenticated user
        login(request, user)  # Log the user in
        return Response({"message": "Login successful."}, status=status.HTTP_200_OK)

class UserLogoutView(generics.GenericAPIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        logout(request)  # Log the user out
        return Response({"message": "Logout successful."}, status=status.HTTP_200_OK)

class UserDetailView(generics.RetrieveUpdateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = UserSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        user = self.request.user
        logger.info(f"User {user.username} accessed their profile.")
        return user
# auth_service/urls.py
from django.urls import path
from .views import UserLoginView, UserSignupView, UserDetailView, home

app_name = 'auth_service'

urlpatterns = [
    
    path('', home, name='home'),
    path('login/', UserLoginView.as_view(), name='login'),
    path('signup/', UserSignupView.as_view(), name='signup'),
    path('profile/', UserDetailView.as_view(), name='profile'),
]
# views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import ZKPSettings, ZKPRecord
from .serializers import ZKPSettingsSerializer, ZKPRecordSerializer
from .services import generate_zero_knowledge_proof, verify_zero_knowledge_proof, generate_mock_data
from rest_framework.response import Response
from rest_framework.decorators import api_view

from django.urls import reverse

@api_view(['GET'])
def home(request):
    urls = {
        'home': request.build_absolute_uri(reverse('zeroknowledgeproof:home')),
        'zkp-settings': request.build_absolute_uri(reverse('zeroknowledgeproof:zkp-settings')),
        'generate-zkp': request.build_absolute_uri(reverse('zeroknowledgeproof:generate-zkp')),
        'verify-zkp': request.build_absolute_uri(reverse('zeroknowledgeproof:verify-zkp')),
    }
    return Response({
        "message": "Welcome to Zero Knowledge Proof!",
        "available_urls": urls,
    })


class ZKPSettingsView(APIView):
    """
    API to get and update ZKP settings for the user.
    """
    def get(self, request):
        zkp_settings = ZKPSettings.objects.get(user=request.user)
        serializer = ZKPSettingsSerializer(zkp_settings)
        return Response(serializer.data)

    def post(self, request):
        zkp_settings, created = ZKPSettings.objects.get_or_create(user=request.user)
        serializer = ZKPSettingsSerializer(zkp_settings, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class GenerateZKPView(APIView):
    """
    API to generate a Zero-Knowledge Proof for the user.
    """
    def post(self, request):
        data = request.data.get('data', generate_mock_data())  # Allow custom data or generate mock data
        proof = generate_zero_knowledge_proof(data)
        zkp_record = ZKPRecord.objects.create(user=request.user, proof_data=proof, proof_type="custom")
        serializer = ZKPRecordSerializer(zkp_record)
        return Response(serializer.data, status=status.HTTP_201_CREATED)


class VerifyZKPView(APIView):
    """
    API to verify a Zero-Knowledge Proof.
    """
    def post(self, request):
        data = request.data.get('data')
        proof = request.data.get('proof')
        if verify_zero_knowledge_proof(proof, data):
            return Response({"message": "Proof verified successfully."}, status=status.HTTP_200_OK)
        else:
            return Response({"message": "Proof verification failed."}, status=status.HTTP_400_BAD_REQUEST)


# Get history
# urls.py

from django.urls import path
from .views import home,ZKPSettingsView, GenerateZKPView, VerifyZKPView
app_name = 'zeroknowledgeproof'
urlpatterns = [
    path('',home, name='home'),
    path('settings/', ZKPSettingsView.as_view(), name='zkp-settings'),
    path('generate/', GenerateZKPView.as_view(), name='generate-zkp'),
    path('verify/', VerifyZKPView.as_view(), name='verify-zkp'),
]
# views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Credential
from .serializers import CredentialSerializer
from rest_framework.response import Response
from rest_framework.decorators import api_view

from django.urls import reverse

@api_view(['GET'])
def home(request):
    urls = {
        'home': request.build_absolute_uri(reverse('wallet:home')),
        'credential-list': request.build_absolute_uri(reverse('wallet:credential-list')),
        'credential-detail': request.build_absolute_uri(reverse('wallet:credential-detail', kwargs={'credential_id': 1})),  # Example ID
        'revoke-credential': request.build_absolute_uri(reverse('wallet:revoke-credential', kwargs={'credential_id': 1})),  # Example ID
    }
    return Response({
        "message": "Welcome to Wallet!",
        "available_urls": urls,
    })

class CredentialListView(APIView):
    """
    API to retrieve all credentials for the current user.
    """
    def get(self, request):
        credentials = Credential.objects.filter(user=request.user)
        serializer = CredentialSerializer(credentials, many=True)
        return Response(serializer.data)

class CredentialDetailView(APIView):
    """
    API to retrieve a single credential by its ID.
    """
    def get(self, request, credential_id):
        try:
            credential = Credential.objects.get(id=credential_id, user=request.user)
            serializer = CredentialSerializer(credential)
            return Response(serializer.data)
        except Credential.DoesNotExist:
            return Response({"error": "Credential not found."}, status=status.HTTP_404_NOT_FOUND)

class RevokeCredentialView(APIView):
    """
    API to revoke a specific credential.
    """
    def post(self, request, credential_id):
        try:
            credential = Credential.objects.get(id=credential_id, user=request.user)
            credential.status = 'Revoked'
            credential.save()
            return Response({"message": "Credential revoked successfully."}, status=status.HTTP_200_OK)
        except Credential.DoesNotExist:
            return Response({"error": "Credential not found."}, status=status.HTTP_404_NOT_FOUND)
# urls.py

from django.urls import path
from .views import home,CredentialListView, CredentialDetailView, RevokeCredentialView
app_name = 'wallet'
urlpatterns = [
    path('',home, name='home'),
    path('wallet/credentials/', CredentialListView.as_view(), name='credential-list'),
    path('wallet/credentials/<int:credential_id>/', CredentialDetailView.as_view(), name='credential-detail'),
    path('wallet/credentials/<int:credential_id>/revoke/', RevokeCredentialView.as_view(), name='revoke-credential'),
]
# verification_service/views.py
from rest_framework import generics, permissions, status
from rest_framework.response import Response
from .models import VerificationRequest
from .serializers import VerificationRequestSerializer
from .services import verify_zkp_proof  # Adjusted import
from rest_framework.response import Response
from rest_framework.decorators import api_view

from django.urls import reverse

@api_view(['GET'])
def home(request):
    urls = {
        'home': request.build_absolute_uri(reverse('verification_service:home')),
        'submitVerification': request.build_absolute_uri(reverse('verification_service:submitVerification')),
        'verificationStatus': request.build_absolute_uri(reverse('verification_service:verificationStatus')),
        'processVerification': request.build_absolute_uri(reverse('verification_service:processVerification')),
    }
    return Response({
        "message": "Welcome to the Verification Service!",
        "available_urls": urls,
    })


class SubmitVerificationView(generics.CreateAPIView):
    serializer_class = VerificationRequestSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class VerificationStatusView(generics.RetrieveAPIView):
    queryset = VerificationRequest.objects.all()
    serializer_class = VerificationRequestSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return self.queryset.filter(user=self.request.user)

class ProcessVerificationView(generics.UpdateAPIView):
    queryset = VerificationRequest.objects.all()
    serializer_class = VerificationRequestSerializer
    permission_classes = [permissions.IsAdminUser]

    def update(self, request, *args, **kwargs):
        instance = self.get_object()
        if verify_zkp_proof(instance.zkp_proof):
            instance.status = 'APPROVED'
        else:
            instance.status = 'REJECTED'
        instance.save()
        return Response(self.get_serializer(instance).data)
from django.urls import path
from . import views  # Import your views
app_name = 'verification_service'
urlpatterns = [
    path('', views.home, name='home'),
    path('submitVerification/', views.SubmitVerificationView.as_view(), name='submitVerification'),
    path('verificationStatus/', views.VerificationStatusView.as_view(), name='verificationStatus'),
    path('processVerification/', views.ProcessVerificationView.as_view(), name='processVerification'),
    # Add more paths as needed
]
# Backend\DigiVerifyMe\apps\auth_service\models.py
from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager, PermissionsMixin

class CustomUserManager(BaseUserManager):
    def create_user(self, username, email, password=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        if not username:
            raise ValueError('The Username field must be set')
        email = self.normalize_email(email)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('is_active', True)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self.create_user(username, email, password, **extra_fields)

class CustomUser(AbstractUser, PermissionsMixin):
    wallet_address = models.CharField(max_length=142, blank=True)
    did = models.CharField(max_length=142, blank=True)


    role = models.CharField(max_length=50, choices=[('user', 'User')], default='user')
    status = models.CharField(max_length=50, default='active')
    profile_picture = models.URLField(blank=True, null=True)
    social_media_links = models.JSONField(null=True, blank=True)
    reputation_score = models.DecimalField(max_digits=5, decimal_places=2, default=0.0)
    multi_signature_requirements = models.JSONField(null=True, default=dict, blank=True)
    last_active_timestamp = models.DateTimeField(auto_now=True)

    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = CustomUserManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email']

    # Add related_name to avoid reverse accessor clashes
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='customuser_set',  # Custom related name
        blank=True,
        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
        verbose_name='groups',
    )

    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='customuser_set',  # Custom related name
        blank=True,
        help_text='Specific permissions for this user.',
        verbose_name='user permissions',
    )

    def __str__(self):
        return self.username
# Backend\DigiVerifyMe\apps\settings\models.py
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class UserSettings(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='zkp_settings')
    display_name = models.CharField(max_length=100, blank=True)
    email_notifications = models.BooleanField(default=True)
    two_factor_auth = models.BooleanField(default=False)
    zkp_age_verification = models.BooleanField(default=False)
    zkp_identity_verification = models.BooleanField(default=False)

    def __str__(self):
        return f"Settings for {self.user.username}"


class SecuritySettings(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    two_factor_auth = models.BooleanField(default=False)
    auto_logout_timer = models.CharField(max_length=20, choices=[('15 minutes', '15 minutes'), ('30 minutes', '30 minutes'), ('1 hour', '1 hour'), ('Never', 'Never')], default='Never')

    def __str__(self):
        return f"Security Settings for {self.user.username}"


class PrivacySettings(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    default_sharing_mode = models.BooleanField(default=True)
    automatic_verification = models.BooleanField(default=False)
    activity_logging = models.BooleanField(default=True)

    def __str__(self):
        return f"Privacy Settings for {self.user.username}"




class NotificationSettings(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    verification_requests = models.BooleanField(default=True)
    security_alerts = models.BooleanField(default=True)
    credential_updates = models.BooleanField(default=True)

    def __str__(self):
        return f"Notification Settings for {self.user.username}"




class ZKPSettings(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    enable_age_verification = models.BooleanField(default=True)
    enable_identity_verification = models.BooleanField(default=True)
    default_proof_type = models.CharField(max_length=50, default="standard")

    def __str__(self):
        return f"ZKP Settings for {self.user.username}"
